import numpy as np
import tensorflow as tf
from keras.backend import tensorflow_backend as tb


tf.nn.top_k()


DF_CHANNEL_FIRST = 'NCHW'
DF_CHANNEL_LAST = 'NHWC'


def channel_first_to_last(data: np.ndarray) -> np.ndarray:
    return data.transpose((0, 2, 3, 1))


def channel_last_to_first(data: np.ndarray) -> np.ndarray:
    return data.transpose((0, 3, 1, 2))


def filters_custom_to_tf(data: np.ndarray) -> np.ndarray:
    return data.transpose((0, 1, 2, 3))


input_data_channel_first = np.array([
    [[[1.0, 1.0, 2.0, 2.0, 2.0],
      [2.0, 2.0, 5.0, 4.0, 1.0],
      [5.0, 7.0, 4.0, 2.0, 1.0],
      [6.0, 1.0, 2.0, 1.0, 2.0],
      [7.0, 2.0, 5.0, 1.0, 1.0]],
     [[2.0, 3.0, 3.0, 1.0, 3.0],
      [1.0, 4.0, 6.0, 2.0, 6.0],
      [3.0, 1.0, 2.0, 1.0, 5.0],
      [1.0, 3.0, 5.0, 4.0, 3.0],
      [2.0, 4.0, 6.0, 1.0, 1.0]],
     [[1.0, 2.0, 1.0, 5.0, 4.0],
      [0.0, 1.0, 0.0, 3.0, 7.0],
      [2.0, 6.0, 7.0, 5.0, 5.0],
      [3.0, 2.0, 4.0, 2.0, 4.0],
      [3.0, 3.0, 1.0, 2.0, 2.0]]],
    [[[2.0, 3.0, 4.0, 5.0, 6.0],
      [2.0, 4.0, 3.0, 4.0, 1.0],
      [6.0, 2.0, 4.0, 2.0, 1.0],
      [4.0, 3.0, 5.0, 4.0, 1.0],
      [1.0, 3.0, 4.0, 9.0, 7.0]],
     [[2.0, 3.0, 1.0, 1.0, 3.0],
      [1.0, 4.0, 4.0, 2.0, 6.0],
      [3.0, 4.0, 5.0, 1.0, 5.0],
      [7.0, 4.0, 2.0, 2.0, 1.0],
      [2.0, 2.0, 6.0, 1.0, 1.0]],
     [[2.0, 1.0, 2.0, 5.0, 3.0],
      [0.0, 3.0, 2.0, 0.0, 7.0],
      [1.0, 6.0, 0.0, 8.0, 9.0],
      [7.0, 1.0, 4.0, 2.0, 4.0],
      [1.0, 5.0, 2.0, 5.0, 2.0]]],
])

input_data_channel_last = np.array([
    [[[1.0, 2.0, 1.0], [1.0, 3.0, 2.0], [2.0, 3.0, 1.0], [2.0, 1.0, 5.0], [2.0, 3.0, 4.0]],
     [[2.0, 1.0, 0.0], [2.0, 4.0, 1.0], [5.0, 6.0, 0.0], [4.0, 2.0, 3.0], [1.0, 6.0, 7.0]],
     [[5.0, 3.0, 2.0], [7.0, 1.0, 6.0], [4.0, 2.0, 7.0], [2.0, 1.0, 5.0], [1.0, 5.0, 5.0]],
     [[6.0, 1.0, 3.0], [1.0, 3.0, 2.0], [2.0, 5.0, 4.0], [1.0, 4.0, 2.0], [2.0, 3.0, 4.0]],
     [[7.0, 2.0, 3.0], [2.0, 4.0, 3.0], [5.0, 6.0, 1.0], [1.0, 1.0, 2.0], [1.0, 1.0, 2.0]]],
    [[[2.0, 1.0, 3.0], [5.0, 6.0, 1.0], [0.0, 5.0, 2.0], [1.0, 3.0, 1.0], [5.0, 2.0, 1.0]],
     [[5.0, 2.0, 4.0], [4.0, 1.0, 2.0], [1.0, 1.0, 1.0], [3.0, 4.0, 2.0], [2.0, 7.0, 1.0]],
     [[1.0, 2.0, 4.0], [2.0, 3.0, 4.0], [7.0, 1.0, 2.0], [4.0, 7.0, 6.0], [1.0, 5.0, 5.0]],
     [[2.0, 3.0, 7.0], [4.0, 2.0, 1.0], [1.0, 7.0, 3.0], [2.0, 3.0, 4.0], [3.0, 4.0, 5.0]],
     [[7.0, 5.0, 1.0], [5.0, 5.0, 5.0], [2.0, 1.0, 5.0], [4.0, 6.0, 4.0], [6.0, 3.0, 1.0]]]
])

filters = np.array([
    [[[1., 0.],
      [0., 3.],
      [0., 2.]],
     [[0., 0.],
      [1., 1.],
      [0., 0.]],
     [[1., 0.],
      [1., 0.],
      [1., 1.]]],
    [[[0., 1.],
      [4., 1.],
      [0., 1.]],
     [[1., 1.],
      [1., 2.],
      [1., 1.]],
     [[3., 0.],
      [0., 1.],
      [0., 0.]]],
    [[[1., 0.],
      [4., 1.],
      [1., 0.]],
     [[0., 0.],
      [1., 1.],
      [0., 0.]],
     [[1., 0.],
      [1., 1.],
      [0., 1.]]]
])

bias = np.array([1.0, 2.0])


def main():
    input_p = tf.placeholder(dtype=tf.float64, shape=(2, 5, 5, 3))
    filter_p = tf.placeholder(dtype=tf.float64, shape=(3, 3, 3, 2))
    bias_p = tf.placeholder(dtype=tf.float64, shape=(2,))
    output_t = tf.nn.avg_pool2d(
        value=input_p,
        ksize=(2, 2),
        strides=(2, 2),
        padding='SAME',
        data_format=DF_CHANNEL_LAST,
    )

    with tf.Session() as session:
        output = session.run(output_t, feed_dict={
            input_p: channel_first_to_last(input_data_channel_first),
            filter_p: filters,
            bias_p: bias,
        })
        output = channel_last_to_first(output)
        print(output.shape)
        print(repr(output))


if __name__ == '__main__':
    main()
